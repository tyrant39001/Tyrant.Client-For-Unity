<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tyrant.Core</name>
    </assembly>
    <members>
        <member name="T:Tyrant.Core.DesignerDataType">
            <summary>
            策划数据类型
            </summary>
        </member>
        <member name="F:Tyrant.Core.DesignerDataType.String">
            <summary>
            字符串
            </summary>
        </member>
        <member name="F:Tyrant.Core.DesignerDataType.Int">
            <summary>
            整数
            </summary>
        </member>
        <member name="F:Tyrant.Core.DesignerDataType.Float">
            <summary>
            小数
            </summary>
        </member>
        <member name="F:Tyrant.Core.DesignerDataType.Bool">
            <summary>
            布尔
            </summary>
        </member>
        <member name="T:Tyrant.Core.IPoolItem">
            <summary>
            对象实现此接口以定义在取出或进入对象池时的行为
            </summary>
        </member>
        <member name="M:Tyrant.Core.IPoolItem.Intialize">
            <summary>
            从对象池中取出后调用
            </summary>
        </member>
        <member name="M:Tyrant.Core.IPoolItem.Release">
            <summary>
            进入对象池时调用
            </summary>
        </member>
        <member name="T:Tyrant.Core.ObjectPoolAttribute">
            <summary>
            通用对象池的特性
            </summary>
        </member>
        <member name="P:Tyrant.Core.ObjectPoolAttribute.InitialValue">
            <summary>
            初始化数量
            </summary>
        </member>
        <member name="P:Tyrant.Core.ObjectPoolAttribute.AddValue">
            <summary>
            每次扩充数量
            </summary>
        </member>
        <member name="P:Tyrant.Core.ObjectPoolAttribute.MaxValue">
            <summary>
            最大连接池数量
            </summary>
        </member>
        <member name="P:Tyrant.Core.ObjectPoolAttribute.ObjectPoolDampingInterval">
            <summary>
            对象池衰减间隔（单位：秒），小于0为不开启衰减模式
            </summary>
        </member>
        <member name="M:Tyrant.Core.ObjectPoolAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            对象池特性构造
            </summary>
            <param name="initValue">初始化数量, 默认值为1</param>
            <param name="addValue">每次扩充数量, 默认值为1</param>
            <param name="maxValue">最大连接池数量, 默认值为10</param>
            <param name="dampingInterval">对象池衰减间隔（单位：秒），默认值为-1</param>
        </member>
        <member name="T:Tyrant.Core.Serialize.DoNotSerializeAttribute">
            <summary>
            表示该类或字段或属性不序列化。不能被派生类继承
            </summary>
        </member>
        <member name="T:Tyrant.Core.PrimaryKeyValues">
            <summary>
            表示数据表一行的主键值，可在字典中作为行的键
            </summary>
        </member>
        <member name="M:Tyrant.Core.PrimaryKeyValues.op_Equality(Tyrant.Core.PrimaryKeyValues,Tyrant.Core.PrimaryKeyValues)">
            <summary>
            包含主键值的数组
            </summary>
        </member>
        <member name="T:Tyrant.Core.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.Culture">
            <summary>
              重写当前线程的 CurrentUICulture 属性，对
              使用此强类型资源类的所有资源查找执行重写。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.BitSetSetBitArgumentException">
            <summary>
              查找类似 参数值{0}不能小于0且必须小于最大位数{1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.GetAbsolutePathException">
            <summary>
              查找类似 参数{1}含有表示返回上一层目录的字符（..\）的数量超过了参数{0}所表示的路径的深度。 的本地化字符串。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.GetRelativePathExption1">
            <summary>
              查找类似 参数{0}和参数{1}所表示的路径其中之一为相对路径而另一个为绝对路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.GetRelativePathExption2">
            <summary>
              查找类似 参数{0}和参数{1}没有公共根路径 的本地化字符串。
            </summary>
        </member>
        <member name="P:Tyrant.Core.Properties.Resources.LoadAssemblyFailed">
            <summary>
              查找类似 加载程序集“{0}”失败，且在当前域中所有已加载的程序集中找不到该程序集加载程序集“{0}”失败，且在当前域中所有已加载的程序集中找不到该程序集 的本地化字符串。
            </summary>
        </member>
        <member name="M:Tyrant.Core.Utility.AppendDirectorySeparatorIfNotEndWith(System.String)">
            <summary>
            如果该字符串不是以目录分隔符结尾，则追加
            </summary>
            <param name="str">指定的字符串</param>
            <returns>如果该字符串不是以目录分隔符结尾，则追加，反之返回原字符串</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.RemoveAllEnterCharAndNewLineChar(System.String)">
            <summary>
            移除该字符串中所有的回车符（\r）和换行符（\n）
            </summary>
            <param name="str">指定的字符串</param>
            <returns>移除了所有的回车符（\r）和换行符（\n）的字符串</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.IsAbsolutePath(System.String)">
            <summary>
            判断一个路径是否是绝对路径
            </summary>
            <param name="path"></param>
            <returns>true表示参数path是绝对路径，false反之</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.GetAbsolutePath(System.String,System.String)">
            <summary>
            计算绝对路径
            </summary>
            <param name="basePath">基础路径</param>
            <param name="relativePath">相对路径</param>
            <returns>相对路径相对于基础路径的绝对路径。如果参数relativePath表示绝对路径，那么无论basePath是什么值，都会返回此路径。</returns>
            <exception cref="T:System.InvalidOperationException">参数relativePath含有表示返回上一层目录的字符（..\）的数量超过了参数basePath所表示的路径的深度。例如GetAbsolutePath(@"C:\aa\", @"..\..\")</exception>
        </member>
        <member name="M:Tyrant.Core.Utility.GetRelativePath(System.String,System.String)">
            <summary>
            计算两个路径的相对路径
            </summary>
            <param name="path1">路径1，可以是绝对路径，也可以是相对路径</param>
            <param name="path2">路径2，可以是绝对路径，也可以是相对路径</param>
            <returns>路径1相对于路径2的相对路径，例如GetRelativePath("C:\\aa\\bb\\cc\\", "C:\\aa\\bb\\")返回"..\\"</returns>
            <exception cref="T:System.ArgumentException">参数path1和参数path2所表示的路径其中之一为相对路径而另一个为绝对路径，或这2个路径没有公共根路径（例如C:\aa和D:\aa）。</exception>
        </member>
        <member name="M:Tyrant.Core.Utility.ConvertByteArrayToHexString(System.Byte[])">
            <summary>
            将byte数组转换成其等效的16进制数字的字符串。
            </summary>
            <param name="byteArray">要转换的byte数组</param>
            <returns>一个字符串，参数byte数组中的每一个元素都会转换成其16进制的2个字符。例如byte数组"255,200,136,12"会转换成"ffc8880c"</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.ConvertHexStringToByteArray(System.String)">
            <summary>
            将16进制数字的字符串转换成其等效的byte数组。
            </summary>
            <param name="hexString">由16进制数字组成的字符串</param>
            <returns>与参数等效的byte数组</returns>
            <exception cref="T:System.FormatException">输入字符串的格式不正确（含有非16进制字符）</exception>
        </member>
        <member name="M:Tyrant.Core.Utility.IsCSharpKeyword(System.String)">
            <summary>
            检查参数字符串是否是C#语言关键字
            </summary>
            <param name="str">被检查的字符串</param>
            <returns>true表示参数字符串是C#语言关键字，false表示不是，</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.GetValidVariableName(System.String)">
            <summary>
            根据指定的字符串获取合法的变量名称
            </summary>
            <param name="str">指定的字符串</param>
            <returns>一个符合变量命名规则的变量名</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.IsValidVariableName(System.String)">
            <summary>
            检查参数字符串是否是符合变量命名规则的变量名
            </summary>
            <param name="str">要检查的字符串</param>
            <returns>true表示参数字符串是符合变量命名规则的变量名，false表示不是。</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.IsByteArrayEqual(System.Byte[],System.Byte[])">
            <summary>
            比较2个byte数组的内容是否相同。
            </summary>
            <param name="array1">要比较的第一个byte数组</param>
            <param name="array2">要比较的第二个byte数组</param>
            <returns>true表示相同，false表示不同。如果任何一个参数为null，则返回false。2个数组的Length属性不相同也返回false。最后逐个比较2个数组中的项，其中之一不等则返回true，否则返回true。</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.CloneRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            复制列表中指定范围内的元素
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">源列表</param>
            <param name="offset">源列表的偏移量</param>
            <param name="length">复制的长度</param>
            <returns>包含源列表中指定范围内的元素的数组</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.LoadAssembly(System.String,System.String,System.String,System.String)">
            <summary>
            加载程序集。如果加载失败，则尝试从当前应用程序域中查找。如果目标程序集在全局程序集缓存（GAC）中，则需要指定全部4个参数。如果程序集在磁盘文件中且无强名称，则可忽略后3个参数。有关程序集名称的具体信息请参见<see cref="T:System.Reflection.AssemblyName"/>
            </summary>
            <param name="assemblySimpleName">程序集的简单名称。</param>
            <param name="version">程序集的版本号，默认为"1.0.0.0"。</param>
            <param name="culture">程序集的区域，默认为"neutral"。</param>
            <param name="publicKeyToken">程序集的公钥标记，默认为null。</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">assemblySimpleName为空引用</exception>
            <exception cref="T:Tyrant.Core.LoadAssemblyFailedException">加载目标程序集失败且在当前域中所有已加载的程序集中找不该程序集。<see cref="P:System.Exception.InnerException"/>属性可获取进一步的信息</exception>
        </member>
        <member name="M:Tyrant.Core.Utility.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            获取指定项在迭代器中的从0开始的索引
            </summary>
            <typeparam name="T">迭代器元素类型</typeparam>
            <param name="enumerable">要查找的迭代器</param>
            <param name="item">要查找的制定项</param>
            <returns>指定项在迭代器中的索引，找不到则返回-1</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            获取指定项在迭代器中的从0开始的索引
            </summary>
            <typeparam name="T">迭代器元素类型</typeparam>
            <param name="enumerable">要查找的迭代器</param>
            <param name="predicate">用于测试每个元素是否符合条件的函数</param>
            <returns>指定项在迭代器中的索引，找不到则返回-1</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.MinElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取迭代器中指定条件下最小的那一项
            </summary>
            <typeparam name="T">迭代器的类型</typeparam>
            <typeparam name="I">条件返回值的类型</typeparam>
            <param name="enumerable">指定的迭代器</param>
            <param name="predicate">条件委托</param>
            <returns>迭代器中的最小项</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.MaxElement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            获取迭代器中指定条件下最大的那一项
            </summary>
            <typeparam name="T">迭代器的类型</typeparam>
            <typeparam name="I">条件返回值的类型</typeparam>
            <param name="enumerable">指定的迭代器</param>
            <param name="predicate">条件委托</param>
            <returns>迭代器中的最大项</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.GetLocalAreaIP">
            <summary>
            获取本机局域网IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tyrant.Core.Utility.RandomOrder``1(System.Collections.Generic.IList{``0})">
            <summary>
            将列表乱序
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">指定的列表</param>
        </member>
        <member name="M:Tyrant.Core.Utility.Random``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            从指定列表中随机出指定数量的元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="list">指定的列表</param>
            <param name="count">要随机的数量</param>
            <returns></returns>
        </member>
        <member name="M:Tyrant.Core.Utility.SetSkipAssemblySimpleName(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            加载数据源和其属性时跳过指定的程序集。这样的程序集满足2个条件：1 程序集中没有引用类型继承自BindableObject。2 程序集中没有带CreateBindablePropertiesAttribute属性的无参静态方法
            </summary>
            <param name="names">指定要跳过的程序集简单名称</param>
        </member>
        <member name="M:Tyrant.Core.Utility.ConvertChineseToPinyin(System.String,System.Func{System.Char,System.Int32,System.String})">
            <summary>
            将中文转换成汉语拼音
            </summary>
            <param name="str">要转换的中文</param>
            <param name="notChineseHandler">如果参数str中有字符不是中文则触发此委托。委托中第一个char类型参数表示不是中文的字符，第二个参数表示此字符在参数str中以0为起始的索引，返回值表示不是中文的字符被替换成的字符串。如果此参数为null引用则保留不是中文的字符</param>
            <returns>将参数str中的中文替换成汉语拼音的字符串</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.GetEmoji(System.String)">
            <summary>
            把 Emoji编码 [e]1f1e6-1f1fa[/e]
                [e]1f1e6[/e]
                [e]1f1fa[/e]
                [e]1f1e6[/e]
                [e]1f1f9[/e] 换成对应的字符串,此字符串能被window8.1,ios,andriod 直接显示.
                
            如果在网页中显示,需要设置字体为 'Segoe UI Emoji' 如下.当然客户机还必须得有这个字体.
            
                <span style="font-family:'Segoe UI Emoji';"></span>
                
            </summary>
            <param name="paramContent"></param>
            <returns></returns>
        </member>
        <member name="M:Tyrant.Core.Utility.EmojiToUTF16(System.Int32,System.Boolean)">
             <summary>
             EmoJi U+字符串对应的 int 值 转换成UTF16字符编码的值
             </summary>
             <param name="V">EmojiU+1F604 转成计算机整形以后的值V=0x1F604 </param>
             <param name="LowHeight">低字节在前的顺序.(默认)</param>
             <remarks>
            参考  
            http://blog.csdn.net/fengsh998/article/details/8668002
            http://punchdrunker.github.io/iOSEmoji/table_html/index.html
             V  = 0x64321
             Vx = V - 0x10000
                = 0x54321
                = 0101 0100 0011 0010 0001
            
             Vh = 01 0101 0000 // Vx 的高位部份的 10 bits
             Vl = 11 0010 0001 // Vx 的低位部份的 10 bits
             wh = 0xD800 //結果的前16位元初始值
             wl = 0xDC00 //結果的後16位元初始值
            
             wh = wh | Vh
                = 1101 1000 0000 0000
                |        01 0101 0000
                = 1101 1001 0101 0000
                = 0xD950
            
             wl = wl | Vl
                = 1101 1100 0000 0000
                |        11 0010 0001
                = 1101 1111 0010 0001
                = 0xDF21
             </remarks>
             <returns>EMOJI字符对应的UTF16编码16进制整形表示</returns>
        </member>
        <member name="M:Tyrant.Core.Utility.EmojiCodeToUTF16String(System.String)">
            <summary>
            字符串形式的 Emoji 16进制Unicode编码  转换成 UTF16字符串 能够直接输出到客户端
            </summary>
            <param name="EmojiCode"></param>
            <returns></returns>
        </member>
        <member name="T:Tyrant.Core.LoadAssemblyFailedException">
            <summary>
            调用方法<see cref="M:Tyrant.Core.Utility.LoadAssembly(System.String,System.String,System.String,System.String)"/>加载程序集失败时抛出的异常。
            </summary>
        </member>
        <member name="M:Tyrant.Core.LoadAssemblyFailedException.#ctor">
            <summary>
            初始化 LoadAssemblyFailedException 类的新实例。
            </summary>     
        </member>
        <member name="M:Tyrant.Core.LoadAssemblyFailedException.#ctor(System.String)">
            <summary>
            使用指定的错误消息初始化 LoadAssemblyFailedException 类的新实例。
            </summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:Tyrant.Core.LoadAssemblyFailedException.#ctor(System.String,System.Exception)">
            <summary>
            使用指定错误消息和对作为此异常原因的内部异常的引用来初始化 LoadAssemblyFailedException 类的新实例。
            </summary>
            <param name="message">解释异常原因的错误消息。</param>
            <param name="innerException">导致当前异常的异常；如果未指定内部异常，则是一个 null 引用</param>
        </member>
    </members>
</doc>
